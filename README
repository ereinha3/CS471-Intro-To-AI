This repository contains all code written for CS471 Intro to AI, taken under Professor Thanh Nguyen. This course was modeled after UC Berkeley's AI course. Topics covered include A* Search, Heuristic Functions, Q-Learning, Bayesian Networks, and Reinforcement Learning.

Project 1: Search

This project covers a variety of relatively primitive search algorithms including:
	- Depth First Search
	- Breadth First Search
	- Uniform Cost Search - search by shortest path
	- Greedy Search - search by shortest expected cost
	- A* Search - search by the combination of traveled path length and expected path length to goal
		i. Using a pre-defined heuristic
		ii. Creating a tight heuristic to optimize the algorithm

Project 2: Multi-Agent Search

This project covers a variety of agent types to solve problems, specifically in a zero-sum game. I implemented multiple agents:
	- Reflex Agent - basic heuristic to evaluate next state
	- Minimax Agent - max-min tree creation to maximize user gain while expecting agent to minimize user gain
		i. Alpha-Beta Pruning - Allows efficient computation of arbitrarily-large mini-max trees without comprimizing accuracy
	- Expectimax Agent - minimax agent with stochasticity, assuming minimizing agent will act randomly some percent of the time
	- Evaluation Function for Agents - allows agents to evaluate future states recursively

Project 3: Reinforcement Learning

This project covers a variety of integral reinforcement learning concepts, such as:
	- Value Iteration - dynamic programming algorithm that uses the Bellman equation to find the optimal value function for a Markov Decision Process
	- Policies - allows the user to pre-define explicit policies in certain situations to direct the agent
	- Q-Learning - similar to Value Iteration, but is model-free, learns from experience and updates only current and next state
		i. Epsilon Greedy - adds stochasticity, choose random action an epsilon percent of the time
	- Apprxomate Q-Learning - alternative to Q-Learning that uses and approximation function (linear or nonlinear - neural net) to obtain Q-values
	
